name: 'website'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        STATE_BUCKET: ${{ secrets.STATE_BUCKET }}
        STATE_KEY: ${{ secrets.STATE_KEY }}
        TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
      run: |
        terraform init \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="key=$STATE_KEY" \
          -backend-config="region=$TF_VAR_AWS_REGION"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
      run: terraform apply -auto-approve -input=false
